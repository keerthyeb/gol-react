{"version":3,"sources":["gameLibrary.js","util.js","gameOfLife.js","index.js"],"names":["require","cartesianSquare","cartesianProduct","justifyLength","range","subtractPositions","isNotOrigin","addPositions","makeWorld","dimensions","height","width","world","Array","fill","map","x","generateRow","join","findNeighboursPositions","currPosition","filter","delta","isValidPosition","row","column","undefined","findNeighbours","bind","position","countAliveNeighbours","list","length","decideState","cell","module","exports","makeGrid","gridArray","index","findAliveposition","_ref","alivePosition","push","extractSize","_ref2","bottomRight","topLeft","updateWorld","currGeneration","generateNextWorld","_ref3","nextWorld","aliveNeighboursCount","extractValidPosition","operator","operations","+","-","set1","set2","forEach","element1","element2","repeatSymbol","times","symbol","Math","max","set","position1","position2","text","spaceWidth","toString","limit","count","number","NextGeneration","bounds","worldDetails","GameOfLife","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","RenderTable","table","children","createRow","react_default","a","createElement","key","updateCell","assertThisInitialized","initializeAliveCell","startGame","state","aliveCells","setInterval","className","id","onClick","event","target","split","document","getElementById","setState","nextgeneration","React","Component","ReactDOM","render","src_GameOfLife"],"mappings":"uGAQIA,EAAQ,IAPVC,oBACAC,qBACAC,kBACAC,UACAC,sBACAC,gBACAC,iBA2BIC,EAAY,SAASC,GACzB,IAAIC,EAASD,EAAW,GACpBE,EAAQF,EAAW,GACnBG,EAAQ,IAAIC,MAAMH,GAAQI,KAAK,KAEnC,OADAF,EAAQA,EAAMG,IAAI,SAAAC,GAAC,OAAI,IAAIH,MAAMF,GAAOG,KAAK,KAAKC,IAAI,SAAAC,GAAC,OAAI,OAYvDC,EAAc,SAASL,GAE3B,MAAO,KADPA,EAAQA,EAAMG,IAAI,SAAAC,GAAC,OAAIb,EAAca,EAAG,GAAK,OAC1BE,KAAK,KAGpBC,EAA0B,SAASC,GACvC,OAAOnB,EAAgB,EAAE,EAAG,EAAG,IAC5BoB,OAAOf,GACPS,IAAI,SAAAO,GAAK,OAAIf,EAAae,EAAOF,MAGhCG,EAAkB,SAASX,EAAOQ,GACtC,IAAII,EAAMJ,EAAa,GACnBK,EAASL,EAAa,GAC1B,YAAqBM,GAAdd,EAAMY,SAA2CE,GAAtBd,EAAMY,GAAKC,IAGzCE,EAAiB,SAASf,EAAOQ,GAGrC,OAF0BD,EAAwBC,GAG/CC,OAAOE,EAAgBK,KAAK,KAAMhB,IAClCG,IAAI,SAAAc,GAAQ,OAAIjB,EAAMiB,EAAS,IAAIA,EAAS,OAG3CC,EAAuB,SAASC,EAAMF,GAC1C,OAAOF,EAAeI,EAAMF,GAAUR,OAAO,SAAAL,GAAC,OAAS,GAALA,IAAQgB,QAUtDC,EAAc,SAASD,EAAQE,GAEnC,MADY,CAAC,IAAK,IAAKA,EAAM,IAAK,IAAK,IAAK,IAAK,IAAK,KACzCF,IAefG,EAAOC,QAAU,CACfC,SA9De,SAASzB,GAExB,IADA,IAAI0B,EAAY,GACPC,EAAQ,EAAGA,EAAQ3B,EAAMoB,OAAQO,IACxCD,EAAUC,GAAStB,EAAYL,EAAM2B,IAEvC,OAAOD,EAAUpB,KAAK,OA0DtBV,YACAmB,iBACAa,kBAjGwB,SAAAC,GAAgC,IAArB7B,EAAqB6B,EAArB7B,MAAOH,EAAcgC,EAAdhC,WACtCiC,EAAgB,GAChBhC,EAASD,EAAW,GACpBE,EAAQF,EAAW,GAKvB,OAJAP,EAAiBE,EAAMM,GAASN,EAAMO,IAAQI,IAAI,SAAAc,GACb,GAAnCjB,EAAMiB,EAAS,IAAIA,EAAS,KAC1Ba,EAAcC,KAAK,CAACd,EAAS,GAAIA,EAAS,OAEvCa,GA0FPT,cACAd,0BACAyB,YAlFkB,SAAAC,GAAmC,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,QAG1C,MAAO,CAFMD,EAAY,GAAKC,EAAQ,GAAK,EAC/BD,EAAY,GAAKC,EAAQ,GAAK,IAiF1CC,YA1FkB,SAASpC,EAAOqC,GAIlC,OAHAA,EAAelC,IAAI,SAAAc,GACjBN,EAAgBX,EAAOiB,KAAcjB,EAAMiB,EAAS,IAAIA,EAAS,IAAM,KAElEjB,GAuFPW,kBACAO,uBACAoB,kBAvBwB,SAAAC,GAExB,IAFwD,IAArB1C,EAAqB0C,EAArB1C,WAAYG,EAASuC,EAATvC,MAC3CwC,EAAY5C,EAAUC,GACjBe,EAAM,EAAGA,EAAMf,EAAW,GAAIe,IACrC,IAAK,IAAIC,EAAS,EAAGA,EAAShB,EAAW,GAAIgB,IAAU,CACrD,IAAIS,EAAOtB,EAAMY,GAAKC,GAClB4B,EAAuBvB,EAAqBlB,EAAO,CAACY,EAAKC,IAC7D2B,EAAU5B,GAAKC,GAAUQ,EAAYoB,EAAsBnB,GAG/D,OAAOkB,GAePE,qBApC2B,SAASZ,EAAeK,EAASQ,GAC5D,IAAIC,EAAa,CAAEC,IAAKlD,EAAcmD,IAAKrD,GAC3C,OAAwBqC,EAAc3B,IAAI,SAAAN,GAAU,OAClD+C,EAAWD,GAAU9C,EAAYsC,MAkCnC9B,iCCpHF,IAAMf,EAAmB,SAASyD,EAAMC,GACtC,IAAI1D,EAAmB,GAMvB,OALAyD,EAAKE,QAAQ,SAAAC,GACXF,EAAKC,QAAQ,SAAAE,GACX7D,EAAiByC,KAAK,CAACmB,EAAUC,QAG9B7D,GA6BH8D,EAAe,SAASC,EAAOC,GAEnC,OADAD,EAAQE,KAAKC,IAAI,EAAGH,GACb,IAAIpD,MAAMoD,GAAOnD,KAAKoD,GAAQhD,KAAK,KAG5CiB,EAAOC,QAAU,CACfnC,gBAhCsB,SAASoE,GAC/B,OAAOnE,EAAiBmE,EAAKA,IAgC7BnE,mBACAK,aA9BmB,SAAS+D,EAAWC,GACvC,MAAO,CAACD,EAAU,GAAKC,EAAU,GAAID,EAAU,GAAKC,EAAU,KA8B9DlE,kBAtBwB,SAASiE,EAAWC,GAC5C,MAAO,CAACD,EAAU,GAAKC,EAAU,GAAID,EAAU,GAAKC,EAAU,KAsB9DpE,cAfoB,SAASqE,EAAM7D,GACnC,IAAI8D,EAAa9D,EAAQ6D,EAAKE,WAAW1C,OACzC,OAAOwC,EAAOR,EAAaS,EAAY,MAcvCT,eACA5D,MA9BY,SAASuE,GACrB,IAAIC,EAAQ,EACZ,OAAO,IAAI/D,MAAM8D,GAAO7D,KAAK,KAAKC,IAAI,SAAA8D,GAAM,OAAID,OA6BhDtE,YAtBkB,SAASuB,GAC3B,QAAwB,GAAfA,EAAS,IAA0B,GAAfA,EAAS,qICpBpC7B,EAAQ,KAPVQ,cAEAgC,KADArB,0BACAqB,mBACAI,gBACAI,gBACAM,yBACAJ,sBAca4B,EAXQ,SAAS7B,EAAgB8B,GAC9C,IAAItE,EAAamC,EAAYmC,GACzBnE,EAAQJ,EAAUC,GAChBsC,EAAyBgC,EAAzBhC,QAAyBgC,EAAhBjC,YACfG,EAAiBK,EAAqBL,EAAgBF,EAAS,KAE/D,IAAIiC,EAAe,CAAEpE,MADrBA,EAAQoC,EAAYpC,EAAOqC,GACCxC,cAC5BuE,EAAapE,MAAQsC,EAAkB8B,GACvC,IAAItC,EAAgBF,EAAkBwC,GACtC,OAAO1B,EAAqBZ,EAAeK,EAAS,MCdhDkC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,YAAc,WAEZ,IADA,IAAIC,EAAQ,GACHnE,EAAM,EAAGA,EAAM,GAAIA,IAAO,CACjC,IAAIoE,EAAW,GACfT,EAAKU,UAAUD,EAAUpE,GACzBmE,EAAMhD,KAAKmD,EAAAC,EAAAC,cAAA,MAAIC,IAAKzE,GAAMoE,IAE5B,OAAOD,GAnBPR,EAAKe,WAAaf,EAAKe,WAAWtE,KAAhBwD,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAClBA,EAAKiB,oBAAsBjB,EAAKiB,oBAAoBxE,KAAzBwD,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAC3BA,EAAKkB,UAAYlB,EAAKkB,UAAUzE,KAAfwD,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAEjBA,EAAKJ,OAAS,CAAEhC,QAAS,CAAC,EAAG,GAAID,YAAa,CAAC,GAAI,KACnDqC,EAAKmB,MAAQ,CAAEC,WAAY,IAPVpB,2EAWjBqB,YAAYlB,KAAKY,WAAY,uCAarBN,EAAUpE,GAClB,IAAK,IAAIC,EAAS,EAAGA,EAAS,GAAIA,IAChCmE,EAASjD,KACPmD,EAAAC,EAAAC,cAAA,MACES,UAAU,SACVR,IAAKzE,EAAG,IAASC,EACjBiF,GAAIlF,EAAG,IAASC,EAChBkF,QAASrB,KAAKc,mEAMFQ,GAClB,IAAIF,EAAKE,EAAMC,OAAOH,GAAGI,MAAM,KAC/BC,SAASC,eAAeJ,EAAMC,OAAOH,IAAID,UAAY,YACrD,IAAIF,EAAajB,KAAKgB,MAAMC,WAC5BA,EAAW5D,KAAK+D,GAChBpB,KAAK2B,SAAS,CACZV,oDAKFjB,KAAKgB,MAAMC,WAAWxF,IAAI,SAAAmB,GACxB6E,SAASC,eAAe9E,EAAK,GAAL,IAAgBA,EAAK,IAAIuE,UAAY,WAE/D,IAAIS,EAAiBpC,EAAeQ,KAAKgB,MAAMC,WAAYjB,KAAKP,QAChEmC,EAAenG,IAAI,SAAAmB,GACjB6E,SAASC,eAAe9E,EAAK,GAAL,IAAgBA,EAAK,IAAIuE,UAAY,cAE/DnB,KAAK2B,SAAS,CACZV,WAAYW,qCAKd,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aAAQV,KAAKI,gBAEfI,EAAAC,EAAAC,cAAA,UAAQW,QAASrB,KAAKe,WAAtB,iBAnEiBc,IAAMC,WAyE/BC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAAgBR,SAASC,eAAe","file":"static/js/main.d28ed0c6.chunk.js","sourcesContent":["const {\n  cartesianSquare,\n  cartesianProduct,\n  justifyLength,\n  range,\n  subtractPositions,\n  isNotOrigin,\n  addPositions\n} = require(\"./util.js\");\n\nconst findAliveposition = function({ world, dimensions }) {\n  let alivePosition = [];\n  let height = dimensions[0];\n  let width = dimensions[1];\n  cartesianProduct(range(height), range(width)).map(position => {\n    world[position[0]][position[1]] == 1 &&\n      alivePosition.push([position[0], position[1]]);\n  });\n  return alivePosition;\n};\n\nconst updateWorld = function(world, currGeneration) {\n  currGeneration.map(position => {\n    isValidPosition(world, position) && (world[position[0]][position[1]] = 1);\n  });\n  return world;\n};\n\nconst extractSize = function({ bottomRight, topLeft }) {\n  let height = bottomRight[0] - topLeft[0] + 1;\n  let width = bottomRight[1] - topLeft[1] + 1;\n  return [height, width];\n};\n\nconst makeWorld = function(dimensions) {\n  let height = dimensions[0];\n  let width = dimensions[1];\n  let world = new Array(height).fill(\"1\");\n  world = world.map(x => new Array(width).fill(\"*\").map(x => 0));\n  return world;\n};\n\nconst makeGrid = function(world) {\n  let gridArray = [];\n  for (let index = 0; index < world.length; index++) {\n    gridArray[index] = generateRow(world[index]);\n  }\n  return gridArray.join(\"\\n\");\n};\n\nconst generateRow = function(world) {\n  world = world.map(x => justifyLength(x, 3) + \"|\");\n  return \"|\" + world.join(\"\");\n};\n\nconst findNeighboursPositions = function(currPosition) {\n  return cartesianSquare([-1, 0, 1])\n    .filter(isNotOrigin)\n    .map(delta => addPositions(delta, currPosition));\n};\n\nconst isValidPosition = function(world, currPosition) {\n  let row = currPosition[0];\n  let column = currPosition[1];\n  return world[row] != undefined && world[row][column] != undefined;\n};\n\nconst findNeighbours = function(world, currPosition) {\n  let neighboursPositions = findNeighboursPositions(currPosition);\n  let neighbours = [];\n  return neighboursPositions\n    .filter(isValidPosition.bind(null, world))\n    .map(position => world[position[0]][position[1]]);\n};\n\nconst countAliveNeighbours = function(list, position) {\n  return findNeighbours(list, position).filter(x => x == 1).length;\n};\n\nconst extractValidPosition = function(alivePosition, topLeft, operator) {\n  let operations = { \"+\": addPositions, \"-\": subtractPositions };\n  return (alivePosition = alivePosition.map(dimensions =>\n    operations[operator](dimensions, topLeft)\n  ));\n};\n\nconst decideState = function(length, cell) {\n  let rules = [\"0\", \"0\", cell, \"1\", \"0\", \"0\", \"0\", \"0\", \"0\"];\n  return rules[length];\n};\n\nconst generateNextWorld = function({ dimensions, world }) {\n  let nextWorld = makeWorld(dimensions);\n  for (let row = 0; row < dimensions[0]; row++) {\n    for (let column = 0; column < dimensions[1]; column++) {\n      let cell = world[row][column];\n      let aliveNeighboursCount = countAliveNeighbours(world, [row, column]);\n      nextWorld[row][column] = decideState(aliveNeighboursCount, cell);\n    }\n  }\n  return nextWorld;\n};\n\nmodule.exports = {\n  makeGrid,\n  makeWorld,\n  findNeighbours,\n  findAliveposition,\n  decideState,\n  findNeighboursPositions,\n  extractSize,\n  updateWorld,\n  isValidPosition,\n  countAliveNeighbours,\n  generateNextWorld,\n  extractValidPosition,\n  generateRow\n};\n","const cartesianProduct = function(set1, set2) {\n  let cartesianProduct = [];\n  set1.forEach(element1 => {\n    set2.forEach(element2 => {\n      cartesianProduct.push([element1, element2]);\n    });\n  });\n  return cartesianProduct;\n};\n\nconst cartesianSquare = function(set) {\n  return cartesianProduct(set, set);\n};\n\nconst addPositions = function(position1, position2) {\n  return [position1[0] + position2[0], position1[1] + position2[1]];\n};\n\nconst range = function(limit) {\n  let count = 0;\n  return new Array(limit).fill(\"*\").map(number => count++);\n};\n\nconst subtractPositions = function(position1, position2) {\n  return [position1[0] - position2[0], position1[1] - position2[1]];\n};\n\nconst isNotOrigin = function(position) {\n  return !(position[0] == 0 && position[1] == 0);\n};\n\nconst justifyLength = function(text, width) {\n  let spaceWidth = width - text.toString().length;\n  return text + repeatSymbol(spaceWidth, \" \");\n};\n\nconst repeatSymbol = function(times, symbol) {\n  times = Math.max(0, times);\n  return new Array(times).fill(symbol).join(\"\");\n};\n\nmodule.exports = {\n  cartesianSquare,\n  cartesianProduct,\n  addPositions,\n  subtractPositions,\n  justifyLength,\n  repeatSymbol,\n  range,\n  isNotOrigin\n};\n","const {\n  makeWorld,\n  findNeighboursPositions,\n  findAliveposition,\n  extractSize,\n  updateWorld,\n  extractValidPosition,\n  generateNextWorld\n} = require(\"./gameLibrary.js\");\n\nconst NextGeneration = function(currGeneration, bounds) {\n  let dimensions = extractSize(bounds);\n  let world = makeWorld(dimensions);\n  let { topLeft, bottomRight } = bounds;\n  currGeneration = extractValidPosition(currGeneration, topLeft, \"-\");\n  world = updateWorld(world, currGeneration);\n  let worldDetails = { world, dimensions };\n  worldDetails.world = generateNextWorld(worldDetails);\n  let alivePosition = findAliveposition(worldDetails);\n  return extractValidPosition(alivePosition, topLeft, \"+\");\n};\nexport default NextGeneration;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport NextGeneration from \"./gameOfLife\";\n\nclass GameOfLife extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateCell = this.updateCell.bind(this);\n    this.initializeAliveCell = this.initializeAliveCell.bind(this);\n    this.startGame = this.startGame.bind(this);\n\n    this.bounds = { topLeft: [0, 0], bottomRight: [15, 15] };\n    this.state = { aliveCells: [] };\n  }\n\n  startGame() {\n    setInterval(this.updateCell, 1000);\n  }\n\n  RenderTable = () => {\n    let table = [];\n    for (let row = 0; row < 15; row++) {\n      let children = [];\n      this.createRow(children, row);\n      table.push(<tr key={row}>{children}</tr>);\n    }\n    return table;\n  };\n\n  createRow(children, row) {\n    for (let column = 0; column < 15; column++) {\n      children.push(\n        <td\n          className=\"column\"\n          key={row + `_` + column}\n          id={row + `_` + column}\n          onClick={this.initializeAliveCell}\n        />\n      );\n    }\n  }\n\n  initializeAliveCell(event) {\n    let id = event.target.id.split(\"_\");\n    document.getElementById(event.target.id).className = \"aliveCell\";\n    let aliveCells = this.state.aliveCells;\n    aliveCells.push(id);\n    this.setState({\n      aliveCells\n    });\n  }\n\n  updateCell() {\n    this.state.aliveCells.map(cell => {\n      document.getElementById(cell[0] + `_` + cell[1]).className = \"column\";\n    });\n    let nextgeneration = NextGeneration(this.state.aliveCells, this.bounds);\n    nextgeneration.map(cell => {\n      document.getElementById(cell[0] + `_` + cell[1]).className = \"aliveCell\";\n    });\n    this.setState({\n      aliveCells: nextgeneration\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <table>\n          <tbody>{this.RenderTable()}</tbody>\n        </table>\n        <button onClick={this.startGame}>Start</button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<GameOfLife />, document.getElementById(\"root\"));\n"],"sourceRoot":""}